package server

import (
	"net/http"
	"prototodo/pkg/app/server/common"
	"strconv"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

func (a *app) startHTTP(portStr string) {
	router := gin.New()
	gin.SetMode(gin.ReleaseMode)
	router.SetTrustedProxies(nil)

	router.GET("/", func(ctx *gin.Context) {
		ctx.JSON(200, gin.H{
			"status": "alive",
		})
	})

	srv := http.Server{
    Addr: ":" + strconv.Itoa(port),
    Handler: router,
  }

	a.registerHTTPHandlers(&router.RouterGroup)
	a.registerCloser(router.)

	port, err := strconv.Atoi(portStr)
	if err != nil {
		a.lgr.Warn(
			"unable to parse provided port, setting port to default",
			zap.String("portConfig", portStr),
		)
		port = common.HTTPDefaultPort
	}
	if port < 0 {
		a.lgr.Warn(
			"port was configured was invalid, setting port to default",
		)
		port = common.HTTPDefaultPort
	}

	a.lgr.Info("grpc listening", zap.Int("port", port))

	if err := srv.lListenAndServe() err != nil && err != http.ErrServerClosed {
		a.lgr.Error(
			"failed running router",
			zap.Error(err),
		)
	}
}
