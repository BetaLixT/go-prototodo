// [START declaration]
syntax = 'proto3';
package tasks;

import "google/protobuf/timestamp.proto";
import "custom/annotations.proto";
// [END declaration]

// [START csharp_declaration]
option csharp_namespace = "Google.Protobuf.Examples.AddressBook";
// [END csharp_declaration]

// [START go_declaration]
option go_package = "pkg/app/server/contracts";
// [END go_declaration]

// [START common]
message UserContext {
  string userType = 1;
  string id = 2;
  repeated string role = 3;
  repeated string features = 4;
}
// [END common]

// [START tasks domain]
enum Status {
  PENDING = 0;
  PROGRESS = 1;
  COMPLETED = 2;
}

// -- Commands
message CreateTaskCommand {
  UserContext user_context = 1;
  string title = 2;
  string description = 3;
}
message DeleteTaskCommand {
  UserContext user_context = 1;
  string id = 2;
}
message UpdateTaskCommand {
  UserContext user_context = 1;
  string id = 2;
  optional string title = 3;
  optional string description = 4;
}
message ProgressTaskCommand {
  UserContext user_context = 1;
  string id = 2;
}
message CompleteTaskCommand {
  UserContext user_context = 1;
  string id = 2;
}

// -- Queries
message ListTasksQuery {
  UserContext user_context = 1;
  uint32 page_number = 2;
  uint32 count_per_page = 3;
}



// -- Data
message TaskData {
  optional string title = 1;
  optional string description = 2;
  optional Status status = 3;
}

message TaskEvent {
  uint64 id = 1;
  optional string saga_id = 2;
  string stream = 3;
  string stream_id = 4;
  uint64 version = 5;
  string event = 6;
  google.protobuf.Timestamp event_time = 7;
  TaskData data = 8;
}

message TaskEntity {
  string id = 1;
  uint64 version = 2;
  string title = 3;
  string description = 4;
  Status status = 5;
  google.protobuf.Timestamp created_date_time = 6;
  google.protobuf.Timestamp updated_date_time = 7; 
}
// [END tasks domain]

// [START quote domain]
// -- Queries
message GetQuoteQuery {
  UserContext user_context = 1;
}

// -- Data
message QuoteData {
  optional string quote = 1;
}
// [END quote domain]

// -- Service
service TaskService {

  // - Commands
  rpc Create(CreateTaskCommand) returns (TaskEvent) {
    option (custom.documentation) = {
      description: "creates a new task",
      summary: "create new task",
      tags: ["public", "tasks"]
    };
  };
  
  // Summary: Delete existing task
  rpc Delete(DeleteTaskCommand) returns (TaskEvent) {
    option (custom.documentation) = {
      description: "deletes an existing task",
      summary: "delete task",
      tags: ["private", "tasks"]
    };
  };
  
  // Summary: Update existing task
  rpc Update(UpdateTaskCommand) returns (TaskEvent) {};
  
  // Update existing task state to progress
  rpc Progress(ProgressTaskCommand) returns (TaskEvent) {};
  
  // Update existing task to complete
  rpc Complete(CompleteTaskCommand) returns (TaskEvent) {};

  // Query for existing tasks
  rpc ListQuery(ListTasksQuery) returns (TaskEntity) {};
}

service QuoteService {
  
  // Get a quote
  rpc Get(GetQuoteQuery) returns (QuoteData) {};
}

// [END tasks domain]

