// [START declaration]
syntax = 'proto3';
package tasks;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "custom/annotations.proto";

option go_package = "prototodo/pkg/domain/contracts";

// [START common]
message UserContext {
  string userType = 1;
  string id = 2;
  repeated string role = 3;
  repeated string features = 4;
}
// [END common]

// [START tasks domain]
enum Status {
  PENDING = 0;
  PROGRESS = 1;
  COMPLETED = 2;
}

// -- Commands
message CreateTaskCommand {
  UserContext userContext = 1;
  string title = 2;
  string description = 3;
  optional string SagaId = 4;
}
message DeleteTaskCommand {
  UserContext userContext = 1;
  string id = 2;
  optional string SagaId = 3;
}
message UpdateTaskCommand {
  UserContext userContext = 1;
  string id = 2;
  optional string title = 3;
  optional string description = 4;
  optional string SagaId = 5;
}
message ProgressTaskCommand {
  UserContext userContext = 1;
  string id = 2;
  optional string SagaId = 3;
}
message CompleteTaskCommand {
  UserContext userContext = 1;
  string id = 2;
  optional string SagaId = 3;
}

// -- Queries
message ListTasksQuery {
  UserContext userContext = 1;
  uint32 pageNumber = 2;
  uint32 countPerPage = 3;
}

// -- Data
message TaskData {
  optional string title = 1;
  optional string description = 2;
  optional Status status = 3;
  map<string, string> randomMap = 4;
  optional google.protobuf.Struct metadata = 5;
}

message TaskEvent {
  uint64 id = 1;
  optional string sagaId = 2;
  string stream = 3;
  string streamId = 4;
  uint64 version = 5;
  string event = 6;
  google.protobuf.Timestamp eventTime = 7;
  TaskData data = 8;
}

message TaskEntity {
  string id = 1;
  uint64 version = 2;
  string title = 3;
  string description = 4;
  Status status = 5;
  google.protobuf.Timestamp createdDateTime = 6;
  google.protobuf.Timestamp updatedDateTime = 7; 
}

message TaskEntityList {
  repeated TaskEntity tasks = 1;
}
// [END tasks domain]

// [START quote domain]
// -- Commands
message CreateQuoteCommand {
  UserContext userContext = 1;
  string quote = 2;
  optional string SagaId = 3;
}

// -- Queries
message GetQuoteQuery {
  UserContext userContext = 1;
}

// -- Data
message QuoteData {
  optional string quote = 1;
}
// [END quote domain]
