// Code generated by protoc-gen-gohttp. DO NOT EDIT.
// source: contract.proto

package contracts

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/mailru/easyjson"
)

// TaskService
type TaskServiceHTTPServer interface {
	// --- Commands
	Create(context.Context, *CreateTaskCommand) (*TaskEvent, error)
	Delete(context.Context, *DeleteTaskCommand) (*TaskEvent, error)
	Update(context.Context, *UpdateTaskCommand) (*TaskEvent, error)
	Progress(context.Context, *ProgressTaskCommand) (*TaskEvent, error)
	Complete(context.Context, *CompleteTaskCommand) (*TaskEvent, error)
	// --- Queries
	ListQuery(context.Context, *ListTasksQuery) (*TaskEntity, error)
}
type taskService struct {
	app TaskServiceHTTPServer
}

func (p *taskService) create(ctx *gin.Context) {
	body := CreateTaskCommand{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Create(
		ctx,
		&body,
	)
}
func (p *taskService) delete(ctx *gin.Context) {
	body := DeleteTaskCommand{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Delete(
		ctx,
		&body,
	)
}
func (p *taskService) update(ctx *gin.Context) {
	body := UpdateTaskCommand{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Update(
		ctx,
		&body,
	)
}
func (p *taskService) progress(ctx *gin.Context) {
	body := ProgressTaskCommand{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Progress(
		ctx,
		&body,
	)
}
func (p *taskService) complete(ctx *gin.Context) {
	body := CompleteTaskCommand{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Complete(
		ctx,
		&body,
	)
}
func (p *taskService) listQuery(ctx *gin.Context) {
	body := ListTasksQuery{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.ListQuery(
		ctx,
		&body,
	)
}
func RegisterTaskServiceHTTPServer(
	grp *gin.RouterGroup,
	srv TaskServiceHTTPServer,
) {
	ctrl := taskService{app: srv}
	grp.POST("/commands/createTask", ctrl.create)
	grp.POST("/commands/deleteTask", ctrl.delete)
	grp.POST("/commands/updateTask", ctrl.update)
	grp.POST("/commands/progressTask", ctrl.progress)
	grp.POST("/commands/completeTask", ctrl.complete)
	grp.POST("/queries/listTasks", ctrl.listQuery)
}

// QuoteService
type QuoteServiceHTTPServer interface {
	// --- Queries
	Get(context.Context, *GetQuoteQuery) (*QuoteData, error)
}
type quoteService struct {
	app QuoteServiceHTTPServer
}

func (p *quoteService) get(ctx *gin.Context) {
	body := GetQuoteQuery{}
	easyjson.UnmarshalFromReader(ctx.Request.Body, &body)
	p.app.Get(
		ctx,
		&body,
	)
}
func RegisterQuoteServiceHTTPServer(
	grp *gin.RouterGroup,
	srv QuoteServiceHTTPServer,
) {
	ctrl := quoteService{app: srv}
	grp.POST("/queries/getQuote", ctrl.get)
}
