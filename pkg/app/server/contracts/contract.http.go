// Code generated by protoc-gen-gohttp. DO NOT EDIT.
// source: contract.proto

package contracts

import (
	"context"
	"encoding/json"
	"github.com/valyala/fasthttp"
)

// TaskService
type TaskServiceHTTPServer interface {
	// --- Commands
	Create(context.Context, *CreateTaskCommand) (*TaskEvent, error)
	Delete(context.Context, *DeleteTaskCommand) (*TaskEvent, error)
	Update(context.Context, *UpdateTaskCommand) (*TaskEvent, error)
	Progress(context.Context, *ProgressTaskCommand) (*TaskEvent, error)
	Complete(context.Context, *CompleteTaskCommand) (*TaskEvent, error)
	// --- Queries
	ListQuery(context.Context, *ListTasksQuery) (*TaskEntity, error)
}
type handler struct {
	svc0 TaskServiceHTTPServer
}

func (h *handler) handle(ctx *fasthttp.RequestCtx) {
	path := string(ctx.Path())
	switch path {
	// --- Commands
	case "/commands/createTask":
		body := CreateTaskCommand{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.Create(
			ctx,
			&body,
		)
	case "/commands/deleteTask":
		body := DeleteTaskCommand{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.Delete(
			ctx,
			&body,
		)
	case "/commands/updateTask":
		body := UpdateTaskCommand{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.Update(
			ctx,
			&body,
		)
	case "/commands/progressTask":
		body := ProgressTaskCommand{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.Progress(
			ctx,
			&body,
		)
	case "/commands/completeTask":
		body := CompleteTaskCommand{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.Complete(
			ctx,
			&body,
		)
	// --- Queries
	case "/queries/listTasks":
		body := ListTasksQuery{}
		json.Unmarshal(ctx.PostBody(), &body)
		h.svc0.ListQuery(
			ctx,
			&body,
		)
	}
}
