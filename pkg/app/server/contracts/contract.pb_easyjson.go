// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package contracts

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts(in *jlexer.Lexer, out *UserContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userType":
			out.UserType = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "role":
			if in.IsNull() {
				in.Skip()
				out.Role = nil
			} else {
				in.Delim('[')
				if out.Role == nil {
					if !in.IsDelim(']') {
						out.Role = make([]string, 0, 4)
					} else {
						out.Role = []string{}
					}
				} else {
					out.Role = (out.Role)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Role = append(out.Role, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Features = append(out.Features, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts(out *jwriter.Writer, in UserContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserType != "" {
		const prefix string = ",\"userType\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.UserType))
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if len(in.Role) != 0 {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Role {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Features) != 0 {
		const prefix string = ",\"features\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Features {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts1(in *jlexer.Lexer, out *UpdateTaskCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts1(out *jwriter.Writer, in UpdateTaskCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	if in.Title != nil {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Title))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateTaskCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateTaskCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateTaskCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateTaskCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts1(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts2(in *jlexer.Lexer, out *TaskEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "saga_id":
			if in.IsNull() {
				in.Skip()
				out.SagaId = nil
			} else {
				if out.SagaId == nil {
					out.SagaId = new(string)
				}
				*out.SagaId = string(in.String())
			}
		case "stream":
			out.Stream = string(in.String())
		case "stream_id":
			out.StreamId = string(in.String())
		case "version":
			out.Version = uint64(in.Uint64())
		case "event":
			out.Event = string(in.String())
		case "event_time":
			if in.IsNull() {
				in.Skip()
				out.EventTime = nil
			} else {
				if out.EventTime == nil {
					out.EventTime = new(timestamppb.Timestamp)
				}
				easyjsonBabe3b30DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in, out.EventTime)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(TaskData)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts2(out *jwriter.Writer, in TaskEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	if in.SagaId != nil {
		const prefix string = ",\"saga_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SagaId))
	}
	if in.Stream != "" {
		const prefix string = ",\"stream\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stream))
	}
	if in.StreamId != "" {
		const prefix string = ",\"stream_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StreamId))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Version))
	}
	if in.Event != "" {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event))
	}
	if in.EventTime != nil {
		const prefix string = ",\"event_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBabe3b30EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out, *in.EventTime)
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts2(l, v)
}
func easyjsonBabe3b30DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in *jlexer.Lexer, out *timestamppb.Timestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seconds":
			out.Seconds = int64(in.Int64())
		case "nanos":
			out.Nanos = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out *jwriter.Writer, in timestamppb.Timestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seconds != 0 {
		const prefix string = ",\"seconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Seconds))
	}
	if in.Nanos != 0 {
		const prefix string = ",\"nanos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Nanos))
	}
	out.RawByte('}')
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts3(in *jlexer.Lexer, out *TaskEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "version":
			out.Version = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "status":
			out.Status = Status(in.Int32())
		case "created_date_time":
			if in.IsNull() {
				in.Skip()
				out.CreatedDateTime = nil
			} else {
				if out.CreatedDateTime == nil {
					out.CreatedDateTime = new(timestamppb.Timestamp)
				}
				easyjsonBabe3b30DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in, out.CreatedDateTime)
			}
		case "updated_date_time":
			if in.IsNull() {
				in.Skip()
				out.UpdatedDateTime = nil
			} else {
				if out.UpdatedDateTime == nil {
					out.UpdatedDateTime = new(timestamppb.Timestamp)
				}
				easyjsonBabe3b30DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in, out.UpdatedDateTime)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts3(out *jwriter.Writer, in TaskEntity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Version))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Status))
	}
	if in.CreatedDateTime != nil {
		const prefix string = ",\"created_date_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBabe3b30EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out, *in.CreatedDateTime)
	}
	if in.UpdatedDateTime != nil {
		const prefix string = ",\"updated_date_time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBabe3b30EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out, *in.UpdatedDateTime)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts3(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts4(in *jlexer.Lexer, out *TaskData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(Status)
				}
				*out.Status = Status(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts4(out *jwriter.Writer, in TaskData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != nil {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Title))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Status != nil {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts4(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts5(in *jlexer.Lexer, out *QuoteData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quote":
			if in.IsNull() {
				in.Skip()
				out.Quote = nil
			} else {
				if out.Quote == nil {
					out.Quote = new(string)
				}
				*out.Quote = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts5(out *jwriter.Writer, in QuoteData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Quote != nil {
		const prefix string = ",\"quote\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Quote))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuoteData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuoteData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuoteData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuoteData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts5(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts6(in *jlexer.Lexer, out *ProgressTaskCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts6(out *jwriter.Writer, in ProgressTaskCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProgressTaskCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProgressTaskCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProgressTaskCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProgressTaskCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts6(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts7(in *jlexer.Lexer, out *ListTasksQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "page_number":
			out.PageNumber = uint32(in.Uint32())
		case "count_per_page":
			out.CountPerPage = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts7(out *jwriter.Writer, in ListTasksQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.PageNumber != 0 {
		const prefix string = ",\"page_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.PageNumber))
	}
	if in.CountPerPage != 0 {
		const prefix string = ",\"count_per_page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.CountPerPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListTasksQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListTasksQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListTasksQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListTasksQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts7(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts8(in *jlexer.Lexer, out *GetQuoteQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts8(out *jwriter.Writer, in GetQuoteQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetQuoteQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetQuoteQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetQuoteQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetQuoteQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts8(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts9(in *jlexer.Lexer, out *DeleteTaskCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts9(out *jwriter.Writer, in DeleteTaskCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteTaskCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteTaskCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteTaskCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteTaskCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts9(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts10(in *jlexer.Lexer, out *CreateTaskCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts10(out *jwriter.Writer, in CreateTaskCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTaskCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTaskCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTaskCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTaskCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts10(l, v)
}
func easyjsonBabe3b30DecodePrototodoPkgAppServerContracts11(in *jlexer.Lexer, out *CompleteTaskCommand) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_context":
			if in.IsNull() {
				in.Skip()
				out.UserContext = nil
			} else {
				if out.UserContext == nil {
					out.UserContext = new(UserContext)
				}
				(*out.UserContext).UnmarshalEasyJSON(in)
			}
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBabe3b30EncodePrototodoPkgAppServerContracts11(out *jwriter.Writer, in CompleteTaskCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserContext != nil {
		const prefix string = ",\"user_context\":"
		first = false
		out.RawString(prefix[1:])
		(*in.UserContext).MarshalEasyJSON(out)
	}
	if in.Id != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompleteTaskCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompleteTaskCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBabe3b30EncodePrototodoPkgAppServerContracts11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompleteTaskCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompleteTaskCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBabe3b30DecodePrototodoPkgAppServerContracts11(l, v)
}
