// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: contracts/service.proto

package contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	contracts "prototodo/pkg/domain/contracts"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	// - Commands
	Create(ctx context.Context, in *contracts.CreateTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error)
	Delete(ctx context.Context, in *contracts.DeleteTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error)
	Update(ctx context.Context, in *contracts.UpdateTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error)
	// Update existing task state to progress
	Progress(ctx context.Context, in *contracts.ProgressTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error)
	// Update existing task to complete
	Complete(ctx context.Context, in *contracts.CompleteTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error)
	// Query for existing tasks
	ListQuery(ctx context.Context, in *contracts.ListTasksQuery, opts ...grpc.CallOption) (*contracts.TaskEntity, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) Create(ctx context.Context, in *contracts.CreateTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error) {
	out := new(contracts.TaskEvent)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *contracts.DeleteTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error) {
	out := new(contracts.TaskEvent)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *contracts.UpdateTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error) {
	out := new(contracts.TaskEvent)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Progress(ctx context.Context, in *contracts.ProgressTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error) {
	out := new(contracts.TaskEvent)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Progress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Complete(ctx context.Context, in *contracts.CompleteTaskCommand, opts ...grpc.CallOption) (*contracts.TaskEvent, error) {
	out := new(contracts.TaskEvent)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListQuery(ctx context.Context, in *contracts.ListTasksQuery, opts ...grpc.CallOption) (*contracts.TaskEntity, error) {
	out := new(contracts.TaskEntity)
	err := c.cc.Invoke(ctx, "/tasks.TaskService/ListQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	// - Commands
	Create(context.Context, *contracts.CreateTaskCommand) (*contracts.TaskEvent, error)
	Delete(context.Context, *contracts.DeleteTaskCommand) (*contracts.TaskEvent, error)
	Update(context.Context, *contracts.UpdateTaskCommand) (*contracts.TaskEvent, error)
	// Update existing task state to progress
	Progress(context.Context, *contracts.ProgressTaskCommand) (*contracts.TaskEvent, error)
	// Update existing task to complete
	Complete(context.Context, *contracts.CompleteTaskCommand) (*contracts.TaskEvent, error)
	// Query for existing tasks
	ListQuery(context.Context, *contracts.ListTasksQuery) (*contracts.TaskEntity, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) Create(context.Context, *contracts.CreateTaskCommand) (*contracts.TaskEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTaskServiceServer) Delete(context.Context, *contracts.DeleteTaskCommand) (*contracts.TaskEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTaskServiceServer) Update(context.Context, *contracts.UpdateTaskCommand) (*contracts.TaskEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTaskServiceServer) Progress(context.Context, *contracts.ProgressTaskCommand) (*contracts.TaskEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedTaskServiceServer) Complete(context.Context, *contracts.CompleteTaskCommand) (*contracts.TaskEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedTaskServiceServer) ListQuery(context.Context, *contracts.ListTasksQuery) (*contracts.TaskEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuery not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.CreateTaskCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Create(ctx, req.(*contracts.CreateTaskCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.DeleteTaskCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Delete(ctx, req.(*contracts.DeleteTaskCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.UpdateTaskCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Update(ctx, req.(*contracts.UpdateTaskCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.ProgressTaskCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Progress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Progress(ctx, req.(*contracts.ProgressTaskCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.CompleteTaskCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Complete(ctx, req.(*contracts.CompleteTaskCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.ListTasksQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.TaskService/ListQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListQuery(ctx, req.(*contracts.ListTasksQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TaskService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskService_Update_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _TaskService_Progress_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _TaskService_Complete_Handler,
		},
		{
			MethodName: "ListQuery",
			Handler:    _TaskService_ListQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/service.proto",
}

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	// Get a quote
	Get(ctx context.Context, in *contracts.GetQuoteQuery, opts ...grpc.CallOption) (*contracts.QuoteData, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) Get(ctx context.Context, in *contracts.GetQuoteQuery, opts ...grpc.CallOption) (*contracts.QuoteData, error) {
	out := new(contracts.QuoteData)
	err := c.cc.Invoke(ctx, "/tasks.QuoteService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	// Get a quote
	Get(context.Context, *contracts.GetQuoteQuery) (*contracts.QuoteData, error)
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) Get(context.Context, *contracts.GetQuoteQuery) (*contracts.QuoteData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(contracts.GetQuoteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.QuoteService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).Get(ctx, req.(*contracts.GetQuoteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _QuoteService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/service.proto",
}
